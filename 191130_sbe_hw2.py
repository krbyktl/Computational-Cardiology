# -*- coding: utf-8 -*-
"""191130 SBE HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJJlmglkhTu5mu8Uo-iF0vvnvSbrGT6v
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Q2a
def piecewise(t):
  if t >= 0 and t < 0.5:
    V = -160*t**3+320*t**2-85
  elif t >= 0.5 and t < 1:
    V = 160*(1-t)**3-320*(1-t)**2+35
  elif t >= 1 and t < 100:
    V = 35
  elif t >= 100 and t < 250:
    V = -60*((t-100)/150)**4-30*((t-100)/150)**2+35
  elif t >= 250 and t < 300:
    V = 20*((300-t)/50)**4+10*((300-t)/50)**2-85
  else:
    V = -85
  return V

x = np.arange(0,350,0.05)
piece = []
for y in x:
  piece.append(piecewise(y))
plt.plot(x,piece)
plt.xlabel('time(ms)')
plt.ylabel('$V_m$(mV)')

#Q2c
def piecewisec(t):
  if t <= 0 and t > -0.025:
    V = -160*(-t/0.05)**3+320*(-t/0.05)**2-85
  elif t <= -0.025 and t > -0.05:
    V = 160*(1+t/0.05)**3-320*(1+t/0.05)**2+35
  elif t <= -0.05 and t > -5:
    V = 35
  elif t <= -5 and t > -12.5:
    V = -60*((-t/0.05-100)/150)**4-30*((-t/0.05-100)/150)**2+35
  elif t <= -12.5 and t > -15:
    V = 20*((300+t/0.05)/50)**4+10*((300+t/0.05)/50)**2-85
  else:
    V = -85
  return V

x1 = np.arange(-15,0,0.01)
piecec = []
for y in x1:
  piecec.append(piecewisec(y))
plt.plot(x1,piecec)
plt.xlabel('time(ms)')
plt.ylabel('$V_m$(mV)')

#Q2e
for i in range(len(x)):
  if int(piece[i]) == -25:
    print(x[i])

for i in range(len(x)):
  if int(piece[i]) == -73:
    print(x[i])

#Q3
! if [ ! -e vm.csv ] ; \
  then wget https://raw.githubusercontent.com/krbyktl/Computational-Cardiology/master/vm.csv; \
fi
  
df = pd.read_csv("/content/vm.csv", header = None)
df.head(5)

plt.plot(df[0],df[1])
plt.xlabel('position (mm)')
plt.ylabel('$V_m$(mV)')

#plot intracellular logitudinal current as a function of position
dVmdx = np.diff(df[1])/np.diff(df[0])
I_e = dVmdx/(3536.78+3978.87)
plt.plot(df[0][1:],I_e)
plt.xlabel('position (mm)')
plt.ylabel('$I_e$(mA)')

I_i = -I_e
plt.plot(df[0][1:],I_i)
plt.xlabel('position (mm)')
plt.ylabel('$I_i$(mA)')